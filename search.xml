<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>剑指Offer（一）：二维数组中的查找</title>
      <link href="/post/43262.html"/>
      <url>/post/43262.html</url>
      
        <content type="html"><![CDATA[<h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找:"></a>二维数组中的查找:</h2><h4 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h4><p><a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">牛客网</a><br></p><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>    在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br></p><blockquote><p>Consider the following matrix:<br>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p></blockquote><p>Given target = <code>5</code>, return <code>true</code>。<br>Given target = <code>20</code>, return <code>false</code>。<br></p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：<br></h4><p>利用该二维数组的性质：</p><p><strong><font size="3">•</font></strong><font size="3"> 每一行都按照从左到右递增的顺序排序，<br><strong><font size="3">•</font></strong><font size="3"> 每一列都按照从上到下递增的顺序排序<br>    该二维数组中的一个数，小于它的数一定在其左边，大于它的数一定在其下边。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来缩小查找区间，当前元素的查找区间为左下角的所有元素。<br><br><strong><font size="3">•</font></strong><font size="3"> 当 m &lt; target，由于 m 已经是该行最大的元素，想要更大只有从列考虑，取值右移一位<br><strong><font size="3">•</font></strong><font size="3"> 当 m &gt; target，由于 m 已经是该列最小的元素，想要更小只有从行考虑，取值上移一位<br><strong><font size="3">•</font></strong><font size="3"> 当 m = target，找到该值，返回 true<br>用某行最小或某列最大与 target 比较，每次可剔除一整行或一整列。<br></font></font></font></font></font></p><font size="3"><font size="3"><font size="3"><center><img src="http://q7u2muj8t.bkt.clouddn.com/loading3.gif" data-original="https://img-blog.csdnimg.cn/20200322183416116.gif" width="50%"> <br></center><h4 id="复杂度："><a href="#复杂度：" class="headerlink" title="复杂度："></a>复杂度：<br></h4><p>时间复杂度：<strong><em>O</em>(行高+列宽)</strong><br>空间复杂度：<strong><em>O</em>(1)</strong></p><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：<br></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font size="5"><strong>Peace!</strong></font></p><font size="5"></font></font></font></font><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer汇总</title>
      <link href="/post/35137.html"/>
      <url>/post/35137.html</url>
      
        <content type="html"><![CDATA[<h1 id="渣渣鹏的学习记录"><a href="#渣渣鹏的学习记录" class="headerlink" title="渣渣鹏的学习记录"></a>渣渣鹏的学习记录</h1><h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>本系列为渣渣鹏的《剑指Offer》学习笔记。<br>刷题平台：<a href="//www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网</a><br>使用语言：Java<br>GitHub笔记地址：</p><p>    开始刷题的时间太晚了，草草的结束了第一遍学习，把67道题过了一遍，使用的是java语言进行答题，接下来是Leetcode的学习以及后端学习之路。更新ing~</p><h1 id="2、题目总结"><a href="#2、题目总结" class="headerlink" title="2、题目总结"></a>2、题目总结</h1><p>对总共67道题目进行了分类整理，整理如下：</p><h2 id="数组（13道）："><a href="#数组（13道）：" class="headerlink" title="数组（13道）："></a>数组（13道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> <a href="//zhazhapeng.cn/post/43262.html">剑指Offer（一）：二维数组中的查找</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105034165" target="_blank" rel="noopener">剑指Offer（六）：旋转数组的最小数字</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105035481" target="_blank" rel="noopener">剑指Offer（十三）：调整数组顺序使奇数位于偶数前面</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105036509" target="_blank" rel="noopener">剑指Offer（十九）：顺时针打印矩阵</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105042117" target="_blank" rel="noopener">剑指Offer（二十八）：数组中出现次数超过一半的数字</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105044559" target="_blank" rel="noopener">剑指Offer（三十）：连续子数组的最大和（dp）</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105047758" target="_blank" rel="noopener">剑指Offer（三十二）：把数组排成最小的数</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105068178" target="_blank" rel="noopener">剑指Offer（三十五）：数组中的逆序对</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105069244" target="_blank" rel="noopener">剑指Offer（三十七）：数字在排序数组中出现的次数</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105069413" target="_blank" rel="noopener">剑指Offer（四十）：数组中只出现一次的数字</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105076670" target="_blank" rel="noopener">剑指Offer（五十）：数组中重复的数字</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105077451" target="_blank" rel="noopener">剑指Offer（五十一）：构建乘积数组</a><br><strong><font size="3">•</font></strong><font size="3"> <a href="https://blog.csdn.net/weixin_43608645/article/details/105079105" target="_blank" rel="noopener">剑指Offer（六十四）：滑动窗口的最大值</a></font></font></font></font></font></font></font></font></font></font></font></font></font></p><font size="3"><font size="3"><font size="3"><h2 id="字符串（9道）："><a href="#字符串（9道）：" class="headerlink" title="字符串（9道）："></a>字符串（9道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> 剑指Offer(二)：替换空格<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十七）：字符串的排列<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（三十四）：第一个只出现一次的字符<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十三）：左旋转字符串<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十四）：翻转单词顺序序列<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十九）：把字符串转换成整数<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五十二）：正则表达式匹配<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五十三）：表示数值的字符串<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五十四）：字符流中第一个不重复的字符</font></font></font></font></font></font></font></font></font></p><font size="3"><font size="3"><font size="3"><h2 id="链表（8道）："><a href="#链表（8道）：" class="headerlink" title="链表（8道）："></a>链表（8道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（三）：从尾到头打印链表<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（十四）：链表中倒数第k个结点<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（十五）：反转链表<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（十六）：合并两个排序的链表<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十五）：复杂链表的复制<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（三十六）：两个链表的第一个公共结点<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五十五）：链表中环的入口结点<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五十六）：删除链表中重复的结点</font></font></font></font></font></font></font></font></p><font size="3"><font size="3"><font size="3"><h2 id="二叉树（15道）："><a href="#二叉树（15道）：" class="headerlink" title="二叉树（15道）："></a>二叉树（15道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四）：重建二叉树<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（十七）：树的子结构<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（十八）：二叉树的镜像<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十二）：从上往下打印二叉树<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十三）：二叉搜索树的后序遍历序列<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十四）：二叉树中和为某一值的路径<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十六）：二叉搜索树与双向链表<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（三十八）：二叉树的深度<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（三十九）：平衡二叉树<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五十七）：二叉树的下一个结点<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五十八）：对称的二叉树<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五十九）：按之字顺序打印二叉树<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（六十）：把二叉树打印成多行<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（六十一）：序列化二叉树<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（六十二）：二叉搜索树的第k个结点</font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></p><font size="3"><font size="3"><font size="3"><h2 id="栈（3道）："><a href="#栈（3道）：" class="headerlink" title="栈（3道）："></a>栈（3道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（五）：用两个栈实现队列<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十）：包含min函数的栈<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十一）：栈的压入、弹出序列</font></font></font></p><font size="3"><font size="3"><font size="3"><h2 id="回溯法（2道）："><a href="#回溯法（2道）：" class="headerlink" title="回溯法（2道）："></a>回溯法（2道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（六十五）：矩阵中的路径<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（六十六）：机器人的运动范围</font></font></p><font size="3"><font size="3"><h2 id="递归、动态规划（5道）："><a href="#递归、动态规划（5道）：" class="headerlink" title="递归、动态规划（5道）："></a>递归、动态规划（5道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（七）：裴波那契数列<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（八）：跳台阶<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（九）：变态跳台阶<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（十）：矩形覆盖<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（六十七）：剪绳子</font></font></font></font></font></p><font size="3"><font size="3"><font size="3"><h2 id="位运算（1道）："><a href="#位运算（1道）：" class="headerlink" title="位运算（1道）："></a>位运算（1道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（十一）：二进制中1的个数</font></p><font size="3"><h2 id="其他（11道）："><a href="#其他（11道）：" class="headerlink" title="其他（11道）："></a>其他（11道）：</h2><p><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（十二）：数值的整数次方<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（二十九）：最小的K个数<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（三十一）：整数中1出现的次数（从1到n整数中1出现的次数）<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（三十三）：丑数<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十一）：和为S的连续正数序列<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十二）：和为S的两个数字<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十五）：扑克牌顺子<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十六）：孩子们的游戏（圆圈中最后剩下的数）<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十七）：求1+2+3+…+n<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（四十八）：不用加减乘除的加法<br><strong><font size="3">•</font></strong><font size="3"> 剑指Offer（六十三）：数据流中的中位数<br><br><br><font size="5，" color="yellow"><strong>Peace!</strong></font></font></font></font></font></font></font></font></font></font></font></font></p><font size="3"><font size="3"><font size="3"><font size="5，" color="yellow"></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
